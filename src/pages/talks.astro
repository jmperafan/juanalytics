---
import BaseLayout from '../layouts/BaseLayout.astro';
import YouTubeThumbnail from '../components/YouTubeThumbnail.astro';
import { getCollection } from 'astro:content';

const talks = (await getCollection('talks')).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);
---

<BaseLayout title="Conference Talks | Juanalytics">
  <section style="padding: 4rem 0;">
    <div class="container">
      <h1 style="margin-bottom: 2rem;">Conference Talks</h1>
      {talks.length === 0 ? (
        <p style="color: var(--color-text-light); font-size: 1.1rem;">No talks yet. Check back soon!</p>
      ) : (
        <div style="display: flex; gap: 2rem;">
          {/* Sidebar with filters */}
          <div style="flex-shrink: 0; width: 200px;">
            <div style="position: sticky; top: 2rem;">
              <h3 style="font-size: 0.875rem; font-weight: 600; text-transform: uppercase; letter-spacing: 0.05em; color: var(--color-text-light); margin-bottom: 1rem;">Filter by tag</h3>
              <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                <button class="filter-tag active" data-tag="all" style="background: var(--color-primary); color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; font-size: 0.875rem; border: none; cursor: pointer; transition: all 0.2s; text-align: left;">All</button>
                {Array.from(new Set(talks.flatMap(t => t.data.tags || []))).sort().map((tag) => (
                  <button class="filter-tag" data-tag={tag} style="background: var(--color-bg-secondary); color: var(--color-text); padding: 0.5rem 1rem; border-radius: 0.5rem; font-size: 0.875rem; border: 1px solid var(--color-border); cursor: pointer; transition: all 0.2s; text-align: left;">{tag}</button>
                ))}
              </div>
            </div>
          </div>
          {/* Content grid */}
          <div id="talks-grid" style="flex: 1; display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 1.5rem;">
            {talks.map((talk) => (
              <a href={`/talks/${talk.slug}`} class="card talk-card" data-tags={JSON.stringify(talk.data.tags || [])} style="padding: 0; overflow: hidden; display: flex; flex-direction: column;">
                {talk.data.videoUrl && talk.data.videoUrl.includes('youtube') ? (
                  <YouTubeThumbnail videoUrl={talk.data.videoUrl} alt={talk.data.title} />
                ) : talk.data.thumbnail ? (
                  <img src={talk.data.thumbnail} alt={talk.data.title} style="width: 100%; height: 200px; object-fit: cover;" />
                ) : (
                  <div style="width: 100%; height: 200px; background: var(--color-bg-secondary); display: flex; align-items: center; justify-content: center; color: var(--color-text-light);">
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M12 2a3 3 0 0 0-3 3v4a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3z"></path>
                      <path d="M3 7v3a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7"></path>
                      <path d="M8 19l4-7 4 7"></path>
                    </svg>
                  </div>
                )}
                <div style="padding: 1.5rem; flex: 1; display: flex; flex-direction: column;">
                  <h3 style="margin-bottom: 0.75rem; font-size: 1.125rem; line-height: 1.4;">{talk.data.title}</h3>
                  <p style="color: var(--color-primary); font-size: 0.875rem; font-weight: 600; margin-bottom: 0.5rem;">{talk.data.event}</p>
                  <p style="color: var(--color-text-light); font-size: 0.875rem; margin-bottom: 0.75rem;">
                    {talk.data.date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                    {talk.data.location && ` â€¢ ${talk.data.location}`}
                  </p>
                  <p style="color: var(--color-text-light); font-size: 0.9375rem; line-height: 1.6; flex: 1; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">{talk.data.description}</p>
                  {talk.data.tags && talk.data.tags.length > 0 && (
                    <div style="margin-top: auto; padding-top: 0.75rem; display: flex; gap: 0.5rem; flex-wrap: wrap;">
                      {talk.data.tags.map((tag) => (
                        <span class="content-tag" data-tag={tag} style="background: var(--color-bg-secondary); color: var(--color-text); padding: 0.25rem 0.75rem; border-radius: 1rem; font-size: 0.8125rem; border: 1px solid var(--color-border); cursor: pointer; transition: all 0.2s;">{tag}</span>
                      ))}
                    </div>
                  )}
                </div>
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const filterButtons = document.querySelectorAll('.filter-tag');
      const talkCards = document.querySelectorAll('.talk-card');
      const contentTags = document.querySelectorAll('.content-tag');

      function filterByTag(tag: string) {
        filterButtons.forEach(btn => {
          if (btn.getAttribute('data-tag') === tag) {
            btn.classList.add('active');
            (btn as HTMLElement).style.background = 'var(--color-primary)';
            (btn as HTMLElement).style.color = 'white';
            (btn as HTMLElement).style.border = 'none';
          } else {
            btn.classList.remove('active');
            (btn as HTMLElement).style.background = 'var(--color-bg-secondary)';
            (btn as HTMLElement).style.color = 'var(--color-text)';
            (btn as HTMLElement).style.border = '1px solid var(--color-border)';
          }
        });

        talkCards.forEach(card => {
          const cardTags = JSON.parse(card.getAttribute('data-tags') || '[]');
          if (tag === 'all' || cardTags.includes(tag)) {
            (card as HTMLElement).style.display = 'flex';
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });

        document.getElementById('talks-grid')?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }

      filterButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const tag = btn.getAttribute('data-tag') || 'all';
          filterByTag(tag);
        });
      });

      contentTags.forEach(tag => {
        tag.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const tagName = tag.getAttribute('data-tag') || '';
          filterByTag(tagName);
        });
      });
    });
  </script>

  <style>
    .filter-tag:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    .content-tag:hover {
      background: var(--color-primary) !important;
      color: white !important;
      border-color: var(--color-primary) !important;
    }
  </style>
</BaseLayout>
