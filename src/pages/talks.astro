---
import BaseLayout from '../layouts/BaseLayout.astro';
import YouTubeThumbnail from '../components/YouTubeThumbnail.astro';
import { readContentYAML } from '../utils/yamlParser';

const content = await readContentYAML();
const talks = content.talks.map(talk => ({
  data: {
    title: talk.title,
    description: talk.description,
    event: talk.event || talk.extra1 || '',
    eventUrl: talk.url,
    date: talk.date,
    location: talk.location || talk.extra2 || '',
    videoUrl: talk.url,
    thumbnail: talk.thumbnail,
    tags: talk.tags,
  }
}));
---

<BaseLayout title="Conference Talks | Juanalytics">
  <section style="padding: 4rem 0;">
    <div class="container">
      <h1 style="margin-bottom: 2rem;">Conference Talks</h1>
      {talks.length === 0 ? (
        <p style="color: var(--color-text-light); font-size: 1.1rem;">No talks yet. Check back soon!</p>
      ) : (
        <div style="display: flex; gap: 2rem;">
          {/* Sidebar with filters */}
          <div style="flex-shrink: 0; width: 200px;">
            <div style="position: sticky; top: 2rem;">
              <h3 style="font-size: 0.875rem; font-weight: 600; text-transform: uppercase; letter-spacing: 0.05em; color: var(--color-text-light); margin-bottom: 1rem;">Filter by tag</h3>
              <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                <button class="filter-tag active" data-tag="all" style="background: var(--color-primary); color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; font-size: 0.875rem; border: none; cursor: pointer; transition: all 0.2s; text-align: left;">All</button>
                {Array.from(new Set(talks.flatMap(t => t.data.tags || []))).sort().map((tag) => (
                  <button class="filter-tag" data-tag={tag} style="background: var(--color-bg-secondary); color: var(--color-text); padding: 0.5rem 1rem; border-radius: 0.5rem; font-size: 0.875rem; border: 1px solid var(--color-border); cursor: pointer; transition: all 0.2s; text-align: left;">{tag}</button>
                ))}
              </div>
            </div>
          </div>
          {/* Content grid */}
          <div id="talks-grid" style="flex: 1; display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 1.5rem;">
            {talks.map((talk) => {
              const isYouTubeUrl = talk.data.videoUrl && (talk.data.videoUrl.includes('youtube') || talk.data.videoUrl.includes('youtu.be'));
              const CardElement = isYouTubeUrl ? 'div' : 'a';
              const linkProps = !isYouTubeUrl && talk.data.videoUrl ? { href: talk.data.videoUrl, target: '_blank', rel: 'noopener noreferrer' } : {};

              return (
              <CardElement
                {...linkProps}
                class="card talk-card"
                data-tags={JSON.stringify(talk.data.tags || [])}
                data-video-url={talk.data.videoUrl || ''}
                data-has-video={talk.data.videoUrl ? 'true' : 'false'}
                data-is-youtube={isYouTubeUrl ? 'true' : 'false'}
                style="padding: 0; overflow: hidden; display: flex; flex-direction: column; transition: transform 0.2s, box-shadow 0.2s;"
              >
                <div class="video-thumbnail-container" style="position: relative; width: 100%; height: 200px; background: #000; cursor: pointer;">
                  {talk.data.videoUrl && talk.data.videoUrl.includes('youtube') ? (
                    <>
                      <div class="video-thumbnail" style="width: 100%; height: 100%; position: relative;">
                        <YouTubeThumbnail videoUrl={talk.data.videoUrl} alt={talk.data.title} thumbnail={talk.data.thumbnail} />
                        <div class="play-button" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 64px; height: 64px; background: rgba(255, 0, 0, 0.9); border-radius: 50%; display: flex; align-items: center; justify-content: center; pointer-events: none; transition: all 0.2s;">
                          <svg width="28" height="28" viewBox="0 0 24 24" fill="white" style="margin-left: 4px; pointer-events: none;">
                            <polygon points="5 3 19 12 5 21 5 3"></polygon>
                          </svg>
                        </div>
                      </div>
                      <div class="video-player" style="display: none; width: 100%; height: 100%;"></div>
                    </>
                  ) : talk.data.thumbnail ? (
                    <img src={talk.data.thumbnail} alt={talk.data.title} style="width: 100%; height: 100%; object-fit: cover;" />
                  ) : (
                    <div style="width: 100%; height: 100%; background: var(--color-bg-secondary); display: flex; align-items: center; justify-content: center; color: var(--color-text-light);">
                      <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M12 2a3 3 0 0 0-3 3v4a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3z"></path>
                        <path d="M3 7v3a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7"></path>
                        <path d="M8 19l4-7 4 7"></path>
                      </svg>
                    </div>
                  )}
                </div>
                <div style="padding: 1.5rem; flex: 1; display: flex; flex-direction: column;">
                  <h3 style="margin-bottom: 0.75rem; font-size: 1.125rem; line-height: 1.4;">{talk.data.title}</h3>
                  <p style="color: var(--color-primary); font-size: 0.875rem; font-weight: 600; margin-bottom: 0.5rem; display: flex; align-items: center; gap: 0.5rem;">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                      <line x1="16" y1="2" x2="16" y2="6"></line>
                      <line x1="8" y1="2" x2="8" y2="6"></line>
                      <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                    {talk.data.event}
                  </p>
                  <p style="color: var(--color-text-light); font-size: 0.875rem; margin-bottom: 0.75rem; display: flex; align-items: center; gap: 0.5rem;">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <circle cx="12" cy="12" r="10"></circle>
                      <polyline points="12 6 12 12 16 14"></polyline>
                    </svg>
                    {talk.data.date.toISOString().split('T')[0]}
                    {talk.data.location && (
                      <>
                        <span style="margin: 0 0.25rem;">â€¢</span>
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                          <circle cx="12" cy="10" r="3"></circle>
                        </svg>
                        {talk.data.location}
                      </>
                    )}
                  </p>
                  <p style="color: var(--color-text-light); font-size: 0.9375rem; line-height: 1.6; flex: 1; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">{talk.data.description}</p>
                  {talk.data.tags && talk.data.tags.length > 0 && (
                    <div style="margin-top: auto; padding-top: 0.75rem; display: flex; gap: 0.5rem; flex-wrap: wrap;">
                      {talk.data.tags.map((tag) => (
                        <span class="content-tag" data-tag={tag} style="background: var(--color-bg-secondary); color: var(--color-text); padding: 0.25rem 0.75rem; border-radius: 1rem; font-size: 0.8125rem; border: 1px solid var(--color-border); cursor: pointer; transition: all 0.2s;">{tag}</span>
                      ))}
                    </div>
                  )}
                </div>
              </CardElement>
              );
            })}
          </div>
        </div>
      )}
    </div>
  </section>

  <script>
    function extractYouTubeId(url: string): string | null {
      const patterns = [
        /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\s]+)/,
        /youtube\.com\/shorts\/([^&\s]+)/
      ];

      for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match) return match[1];
      }

      return null;
    }

    function extractVimeoId(url: string): string | null {
      const match = url.match(/vimeo\.com\/(\d+)/);
      return match ? match[1] : null;
    }

    function getEmbedUrl(videoUrl: string): string {
      if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {
        const videoId = extractYouTubeId(videoUrl);
        return videoId ? `https://www.youtube.com/embed/${videoId}` : '';
      } else if (videoUrl.includes('vimeo.com')) {
        const videoId = extractVimeoId(videoUrl);
        return videoId ? `https://player.vimeo.com/video/${videoId}` : '';
      }
      return videoUrl;
    }

    document.addEventListener('DOMContentLoaded', () => {
      const filterButtons = document.querySelectorAll('.filter-tag');
      const talkCards = document.querySelectorAll('.talk-card');
      const contentTags = document.querySelectorAll('.content-tag');

      function filterByTag(tag: string) {
        filterButtons.forEach(btn => {
          if (btn.getAttribute('data-tag') === tag) {
            btn.classList.add('active');
            (btn as HTMLElement).style.background = 'var(--color-primary)';
            (btn as HTMLElement).style.color = 'white';
            (btn as HTMLElement).style.border = 'none';
          } else {
            btn.classList.remove('active');
            (btn as HTMLElement).style.background = 'var(--color-bg-secondary)';
            (btn as HTMLElement).style.color = 'var(--color-text)';
            (btn as HTMLElement).style.border = '1px solid var(--color-border)';
          }
        });

        talkCards.forEach(card => {
          const cardTags = JSON.parse(card.getAttribute('data-tags') || '[]');
          if (tag === 'all' || cardTags.includes(tag)) {
            (card as HTMLElement).style.display = 'flex';
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });

        document.getElementById('talks-grid')?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }

      filterButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const tag = btn.getAttribute('data-tag') || 'all';
          filterByTag(tag);
        });
      });

      contentTags.forEach(tag => {
        tag.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const tagName = tag.getAttribute('data-tag') || '';
          filterByTag(tagName);
        });
      });

      // Video thumbnail clicks - play inline for YouTube only
      talkCards.forEach(card => {
        const isYouTube = card.getAttribute('data-is-youtube') === 'true';

        // Only add click handler for YouTube videos
        if (isYouTube) {
          const thumbnailContainer = card.querySelector('.video-thumbnail-container');
          const thumbnail = card.querySelector('.video-thumbnail');
          const playerContainer = card.querySelector('.video-player');

          if (thumbnailContainer && thumbnail && playerContainer) {
            thumbnailContainer.addEventListener('click', (e) => {
              e.stopPropagation();

              const videoUrl = card.getAttribute('data-video-url');

              if (videoUrl) {
                const embedUrl = getEmbedUrl(videoUrl);

                if (embedUrl) {
                  // Hide thumbnail and show player
                  (thumbnail as HTMLElement).style.display = 'none';
                  (playerContainer as HTMLElement).style.display = 'block';

                  // Create and insert iframe
                  const iframe = document.createElement('iframe');
                  iframe.src = embedUrl;
                  iframe.style.width = '100%';
                  iframe.style.height = '100%';
                  iframe.style.border = 'none';
                  iframe.setAttribute('allowfullscreen', '');
                  iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');

                  playerContainer.innerHTML = '';
                  playerContainer.appendChild(iframe);
                }
              }
            });
          }
        }
      });
    });
  </script>

  <style>
    .filter-tag:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    .content-tag:hover {
      background: var(--color-primary) !important;
      color: white !important;
      border-color: var(--color-primary) !important;
    }
    .talk-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    }
    .video-thumbnail-container:hover .play-button {
      transform: translate(-50%, -50%) scale(1.1);
      background: rgba(255, 0, 0, 1);
    }
  </style>
</BaseLayout>
