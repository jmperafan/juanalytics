---
import BaseLayout from '../layouts/BaseLayout.astro';
import { readContentYAML } from '../utils/yamlParser';

const content = await readContentYAML();
const allPodcasts = content.podcasts.map(podcast => ({
  slug: podcast.url.split('/').pop() || '',
  data: {
    title: podcast.title,
    description: podcast.description,
    pubDate: podcast.date,
    podcastName: podcast.extra2 || '',
    audioUrl: podcast.url,
    duration: podcast.duration,
    episode: podcast.extra1 ? parseInt(podcast.extra1) : undefined,
    thumbnail: podcast.thumbnail,
    type: (podcast.extra1 && parseInt(podcast.extra1) > 0) ? 'own' : 'guest',
    tags: podcast.tags,
  }
}));

const ownPodcasts = allPodcasts
  .filter(p => p.data.type === 'own')
  .sort((a, b) => (b.data.episode || 0) - (a.data.episode || 0));
const guestAppearances = allPodcasts
  .filter(p => p.data.type === 'guest')
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<BaseLayout title="Podcasts | Juanalytics">
  <section style="padding: 4rem 0;">
    <div class="container">
      <h1 style="margin-bottom: 2rem;">Podcasts</h1>

      <div style="display: flex; gap: 2rem;">
        {/* Sidebar with filters */}
        <div style="flex-shrink: 0; width: 200px;">
          <div style="position: sticky; top: 2rem;">
            <h3 style="font-size: 0.875rem; font-weight: 600; text-transform: uppercase; letter-spacing: 0.05em; color: var(--color-text-light); margin-bottom: 1rem;">Filter by tag</h3>
            <div style="display: flex; flex-direction: column; gap: 0.5rem;">
              <button class="filter-tag active" data-tag="all" style="background: var(--color-primary); color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; font-size: 0.875rem; border: none; cursor: pointer; transition: all 0.2s; text-align: left;">All</button>
              {Array.from(new Set(allPodcasts.flatMap(p => p.data.tags || []))).sort().map((tag) => (
                <button class="filter-tag" data-tag={tag} style="background: var(--color-bg-secondary); color: var(--color-text); padding: 0.5rem 1rem; border-radius: 0.5rem; font-size: 0.875rem; border: 1px solid var(--color-border); cursor: pointer; transition: all 0.2s; text-align: left;">{tag}</button>
              ))}
            </div>
          </div>
        </div>

        {/* Content area */}
        <div style="flex: 1;">
          {/* My Podcast Section */}
          {ownPodcasts.length > 0 && (
            <div style="margin-bottom: 4rem;" id="my-podcast-section">
              <h2 style="font-size: 1.75rem; margin-bottom: 1.5rem;">My Podcast</h2>
              <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 1.5rem;">
                {ownPodcasts.map((podcast) => (
              <a href={`/podcasts/${podcast.slug}`} class="card podcast-card" data-tags={JSON.stringify(podcast.data.tags || [])} data-type="own" style="padding: 0; overflow: hidden; display: flex; flex-direction: column;">
                {podcast.data.thumbnail ? (
                  <img src={podcast.data.thumbnail} alt={podcast.data.title} style="width: 100%; height: 200px; object-fit: cover;" />
                ) : (
                  <div style="width: 100%; height: 200px; background: var(--color-bg-secondary); display: flex; align-items: center; justify-content: center; color: var(--color-text-light);">
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
                      <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
                      <line x1="12" y1="19" x2="12" y2="23"></line>
                      <line x1="8" y1="23" x2="16" y2="23"></line>
                    </svg>
                  </div>
                )}
                <div style="padding: 1.5rem; flex: 1; display: flex; flex-direction: column;">
                  <h3 style="margin-bottom: 0.5rem; font-size: 1.125rem; line-height: 1.4;">{podcast.data.title}</h3>
                  {(podcast.data.podcastName || podcast.data.episode) && (
                    <p style="color: var(--color-primary); font-weight: 600; font-size: 0.875rem; margin-bottom: 0.75rem;">
                      {podcast.data.podcastName && podcast.data.podcastName}
                      {podcast.data.podcastName && podcast.data.episode && ' • '}
                      {podcast.data.episode && `Episode ${podcast.data.episode}`}
                    </p>
                  )}
                  <p style="color: var(--color-text-light); font-size: 0.875rem; margin-bottom: 0.75rem;">
                    {podcast.data.pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                    {podcast.data.duration && ` • ${podcast.data.duration}`}
                  </p>
                  <p style="color: var(--color-text-light); font-size: 0.9375rem; line-height: 1.6; flex: 1; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">{podcast.data.description}</p>
                  {podcast.data.tags && podcast.data.tags.length > 0 && (
                    <div style="margin-top: auto; display: flex; gap: 0.5rem; flex-wrap: wrap;">
                      {podcast.data.tags.map((tag) => (
                        <span class="content-tag" data-tag={tag} style="background: var(--color-bg-secondary); color: var(--color-text); padding: 0.25rem 0.75rem; border-radius: 1rem; font-size: 0.8125rem; border: 1px solid var(--color-border); cursor: pointer; transition: all 0.2s;">{tag}</span>
                      ))}
                    </div>
                  )}
                </div>
              </a>
            ))}
          </div>
        </div>
      )}

      {/* Guest Appearances Section */}
      {guestAppearances.length > 0 && (
        <div id="guest-section">
          <h2 style="font-size: 1.75rem; margin-bottom: 1.5rem;">Guest Appearances</h2>
          <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 1.5rem;">
            {guestAppearances.map((podcast) => (
              <a href={`/podcasts/${podcast.slug}`} class="card podcast-card" data-tags={JSON.stringify(podcast.data.tags || [])} data-type="guest" style="padding: 0; overflow: hidden; display: flex; flex-direction: column;">
                {podcast.data.thumbnail ? (
                  <img src={podcast.data.thumbnail} alt={podcast.data.title} style="width: 100%; height: 200px; object-fit: cover;" />
                ) : (
                  <div style="width: 100%; height: 200px; background: var(--color-bg-secondary); display: flex; align-items: center; justify-content: center; color: var(--color-text-light);">
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
                      <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
                      <line x1="12" y1="19" x2="12" y2="23"></line>
                      <line x1="8" y1="23" x2="16" y2="23"></line>
                    </svg>
                  </div>
                )}
                <div style="padding: 1.5rem; flex: 1; display: flex; flex-direction: column;">
                  <h3 style="margin-bottom: 0.5rem; font-size: 1.125rem; line-height: 1.4;">{podcast.data.title}</h3>
                  {(podcast.data.podcastName || podcast.data.episode) && (
                    <p style="color: var(--color-primary); font-weight: 600; font-size: 0.875rem; margin-bottom: 0.75rem;">
                      {podcast.data.podcastName && podcast.data.podcastName}
                      {podcast.data.podcastName && podcast.data.episode && ' • '}
                      {podcast.data.episode && `Episode ${podcast.data.episode}`}
                    </p>
                  )}
                  <p style="color: var(--color-text-light); font-size: 0.875rem; margin-bottom: 0.75rem;">
                    {podcast.data.pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                    {podcast.data.duration && ` • ${podcast.data.duration}`}
                  </p>
                  <p style="color: var(--color-text-light); font-size: 0.9375rem; line-height: 1.6; flex: 1; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">{podcast.data.description}</p>
                  {podcast.data.tags && podcast.data.tags.length > 0 && (
                    <div style="margin-top: auto; display: flex; gap: 0.5rem; flex-wrap: wrap;">
                      {podcast.data.tags.map((tag) => (
                        <span class="content-tag" data-tag={tag} style="background: var(--color-bg-secondary); color: var(--color-text); padding: 0.25rem 0.75rem; border-radius: 1rem; font-size: 0.8125rem; border: 1px solid var(--color-border); cursor: pointer; transition: all 0.2s;">{tag}</span>
                      ))}
                    </div>
                  )}
                </div>
              </a>
            ))}
          </div>
        </div>
      )}

          {ownPodcasts.length === 0 && guestAppearances.length === 0 && (
            <p style="color: var(--color-text-light); font-size: 1.1rem;">No podcast episodes yet. Check back soon!</p>
          )}
        </div>
      </div>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const filterButtons = document.querySelectorAll('.filter-tag');
      const podcastCards = document.querySelectorAll('.podcast-card');
      const contentTags = document.querySelectorAll('.content-tag');
      const myPodcastSection = document.getElementById('my-podcast-section');
      const guestSection = document.getElementById('guest-section');

      function filterByTag(tag: string) {
        filterButtons.forEach(btn => {
          if (btn.getAttribute('data-tag') === tag) {
            btn.classList.add('active');
            (btn as HTMLElement).style.background = 'var(--color-primary)';
            (btn as HTMLElement).style.color = 'white';
            (btn as HTMLElement).style.border = 'none';
          } else {
            btn.classList.remove('active');
            (btn as HTMLElement).style.background = 'var(--color-bg-secondary)';
            (btn as HTMLElement).style.color = 'var(--color-text)';
            (btn as HTMLElement).style.border = '1px solid var(--color-border)';
          }
        });

        let ownVisible = 0;
        let guestVisible = 0;

        podcastCards.forEach(card => {
          const cardTags = JSON.parse(card.getAttribute('data-tags') || '[]');
          const cardType = card.getAttribute('data-type');

          if (tag === 'all' || cardTags.includes(tag)) {
            (card as HTMLElement).style.display = 'flex';
            if (cardType === 'own') ownVisible++;
            if (cardType === 'guest') guestVisible++;
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });

        // Hide section headers if no items are visible
        if (myPodcastSection) {
          (myPodcastSection as HTMLElement).style.display = ownVisible > 0 ? 'block' : 'none';
        }
        if (guestSection) {
          (guestSection as HTMLElement).style.display = guestVisible > 0 ? 'block' : 'none';
        }
      }

      filterButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const tag = btn.getAttribute('data-tag') || 'all';
          filterByTag(tag);
        });
      });

      contentTags.forEach(tag => {
        tag.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const tagName = tag.getAttribute('data-tag') || '';
          filterByTag(tagName);
        });
      });
    });
  </script>

  <style>
    .filter-tag:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    .content-tag:hover {
      background: var(--color-primary) !important;
      color: white !important;
      border-color: var(--color-primary) !important;
    }
  </style>
</BaseLayout>
